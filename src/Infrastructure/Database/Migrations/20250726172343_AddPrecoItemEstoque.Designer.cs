// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250726172343_AddPrecoItemEstoque")]
    partial class AddPrecoItemEstoque
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Cadastros.Aggregates.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("Domain.Cadastros.Aggregates.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("servicos", (string)null);
                });

            modelBuilder.Entity("Domain.Cadastros.Aggregates.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid")
                        .HasColumnName("cliente_id");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("veiculos", (string)null);
                });

            modelBuilder.Entity("Domain.Estoque.Aggregates.ItemEstoque", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("itens_estoque", (string)null);
                });

            modelBuilder.Entity("Domain.OrdemServico.Aggregates.OrdemServico.ItemIncluido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ItemEstoqueOriginalId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_estoque_original_id");

                    b.Property<Guid>("OrdemServicoId")
                        .HasColumnType("uuid")
                        .HasColumnName("ordem_servico_id");

                    b.HasKey("Id");

                    b.HasIndex("OrdemServicoId");

                    b.ToTable("itens_incluidos", (string)null);
                });

            modelBuilder.Entity("Domain.OrdemServico.Aggregates.OrdemServico.Orcamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("OrdemServicoId")
                        .HasColumnType("uuid")
                        .HasColumnName("ordem_servico_id");

                    b.HasKey("Id");

                    b.HasIndex("OrdemServicoId")
                        .IsUnique();

                    b.ToTable("orcamentos", (string)null);
                });

            modelBuilder.Entity("Domain.OrdemServico.Aggregates.OrdemServico.OrdemServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uuid")
                        .HasColumnName("veiculo_id");

                    b.HasKey("Id");

                    b.ToTable("ordens_servico", (string)null);
                });

            modelBuilder.Entity("Domain.OrdemServico.Aggregates.OrdemServico.ServicoIncluido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("OrdemServicoId")
                        .HasColumnType("uuid")
                        .HasColumnName("ordem_servico_id");

                    b.Property<Guid>("ServicoOriginalId")
                        .HasColumnType("uuid")
                        .HasColumnName("servico_original_id");

                    b.HasKey("Id");

                    b.HasIndex("OrdemServicoId");

                    b.ToTable("servicos_incluidos", (string)null);
                });

            modelBuilder.Entity("Domain.Cadastros.Aggregates.Cliente", b =>
                {
                    b.OwnsOne("Domain.Cadastros.ValueObjects.Cliente.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cpf");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("Domain.Cadastros.ValueObjects.Cliente.NomeCliente", "Nome", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("nome");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Cadastros.Aggregates.Servico", b =>
                {
                    b.OwnsOne("Domain.Cadastros.ValueObjects.Servico.NomeServico", "Nome", b1 =>
                        {
                            b1.Property<Guid>("ServicoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("nome");

                            b1.HasKey("ServicoId");

                            b1.ToTable("servicos");

                            b1.WithOwner()
                                .HasForeignKey("ServicoId");
                        });

                    b.OwnsOne("Domain.Cadastros.ValueObjects.Servico.PrecoServico", "Preco", b1 =>
                        {
                            b1.Property<Guid>("ServicoId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("preco");

                            b1.HasKey("ServicoId");

                            b1.ToTable("servicos");

                            b1.WithOwner()
                                .HasForeignKey("ServicoId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Preco")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Cadastros.Aggregates.Veiculo", b =>
                {
                    b.HasOne("Domain.Cadastros.Aggregates.Cliente", null)
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Domain.Cadastros.ValueObjects.Veiculo.Ano", "Ano", b1 =>
                        {
                            b1.Property<Guid>("VeiculoId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Valor")
                                .HasColumnType("integer")
                                .HasColumnName("ano");

                            b1.HasKey("VeiculoId");

                            b1.ToTable("veiculos");

                            b1.WithOwner()
                                .HasForeignKey("VeiculoId");
                        });

                    b.OwnsOne("Domain.Cadastros.ValueObjects.Veiculo.Cor", "Cor", b1 =>
                        {
                            b1.Property<Guid>("VeiculoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("cor");

                            b1.HasKey("VeiculoId");

                            b1.ToTable("veiculos");

                            b1.WithOwner()
                                .HasForeignKey("VeiculoId");
                        });

                    b.OwnsOne("Domain.Cadastros.ValueObjects.Veiculo.Marca", "Marca", b1 =>
                        {
                            b1.Property<Guid>("VeiculoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("marca");

                            b1.HasKey("VeiculoId");

                            b1.ToTable("veiculos");

                            b1.WithOwner()
                                .HasForeignKey("VeiculoId");
                        });

                    b.OwnsOne("Domain.Cadastros.ValueObjects.Veiculo.Modelo", "Modelo", b1 =>
                        {
                            b1.Property<Guid>("VeiculoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("modelo");

                            b1.HasKey("VeiculoId");

                            b1.ToTable("veiculos");

                            b1.WithOwner()
                                .HasForeignKey("VeiculoId");
                        });

                    b.OwnsOne("Domain.Cadastros.ValueObjects.Veiculo.Placa", "Placa", b1 =>
                        {
                            b1.Property<Guid>("VeiculoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(7)
                                .HasColumnType("character varying(7)")
                                .HasColumnName("placa");

                            b1.HasKey("VeiculoId");

                            b1.ToTable("veiculos");

                            b1.WithOwner()
                                .HasForeignKey("VeiculoId");
                        });

                    b.OwnsOne("Domain.Cadastros.ValueObjects.Veiculo.TipoVeiculo", "TipoVeiculo", b1 =>
                        {
                            b1.Property<Guid>("VeiculoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("tipo_veiculo");

                            b1.HasKey("VeiculoId");

                            b1.ToTable("veiculos");

                            b1.WithOwner()
                                .HasForeignKey("VeiculoId");
                        });

                    b.Navigation("Ano")
                        .IsRequired();

                    b.Navigation("Cor")
                        .IsRequired();

                    b.Navigation("Marca")
                        .IsRequired();

                    b.Navigation("Modelo")
                        .IsRequired();

                    b.Navigation("Placa")
                        .IsRequired();

                    b.Navigation("TipoVeiculo")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Estoque.Aggregates.ItemEstoque", b =>
                {
                    b.OwnsOne("Domain.Estoque.ValueObjects.ItemEstoque.Nome", "Nome", b1 =>
                        {
                            b1.Property<Guid>("ItemEstoqueId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("nome");

                            b1.HasKey("ItemEstoqueId");

                            b1.ToTable("itens_estoque");

                            b1.WithOwner()
                                .HasForeignKey("ItemEstoqueId");
                        });

                    b.OwnsOne("Domain.Estoque.ValueObjects.ItemEstoque.PrecoItem", "Preco", b1 =>
                        {
                            b1.Property<Guid>("ItemEstoqueId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("preco");

                            b1.HasKey("ItemEstoqueId");

                            b1.ToTable("itens_estoque");

                            b1.WithOwner()
                                .HasForeignKey("ItemEstoqueId");
                        });

                    b.OwnsOne("Domain.Estoque.ValueObjects.ItemEstoque.Quantidade", "Quantidade", b1 =>
                        {
                            b1.Property<Guid>("ItemEstoqueId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Valor")
                                .HasColumnType("integer")
                                .HasColumnName("quantidade");

                            b1.HasKey("ItemEstoqueId");

                            b1.ToTable("itens_estoque");

                            b1.WithOwner()
                                .HasForeignKey("ItemEstoqueId");
                        });

                    b.OwnsOne("Domain.Estoque.ValueObjects.ItemEstoque.TipoItemEstoque", "TipoItemEstoque", b1 =>
                        {
                            b1.Property<Guid>("ItemEstoqueId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("tipo_item_estoque");

                            b1.HasKey("ItemEstoqueId");

                            b1.ToTable("itens_estoque");

                            b1.WithOwner()
                                .HasForeignKey("ItemEstoqueId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Preco")
                        .IsRequired();

                    b.Navigation("Quantidade")
                        .IsRequired();

                    b.Navigation("TipoItemEstoque")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.OrdemServico.Aggregates.OrdemServico.ItemIncluido", b =>
                {
                    b.HasOne("Domain.OrdemServico.Aggregates.OrdemServico.OrdemServico", null)
                        .WithMany("ItensIncluidos")
                        .HasForeignKey("OrdemServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.ItemIncluido.Nome", "Nome", b1 =>
                        {
                            b1.Property<Guid>("ItemIncluidoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("nome");

                            b1.HasKey("ItemIncluidoId");

                            b1.ToTable("itens_incluidos");

                            b1.WithOwner()
                                .HasForeignKey("ItemIncluidoId");
                        });

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.ItemIncluido.PrecoItem", "Preco", b1 =>
                        {
                            b1.Property<Guid>("ItemIncluidoId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("preco");

                            b1.HasKey("ItemIncluidoId");

                            b1.ToTable("itens_incluidos");

                            b1.WithOwner()
                                .HasForeignKey("ItemIncluidoId");
                        });

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.ItemIncluido.Quantidade", "Quantidade", b1 =>
                        {
                            b1.Property<Guid>("ItemIncluidoId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Valor")
                                .HasColumnType("integer")
                                .HasColumnName("quantidade");

                            b1.HasKey("ItemIncluidoId");

                            b1.ToTable("itens_incluidos");

                            b1.WithOwner()
                                .HasForeignKey("ItemIncluidoId");
                        });

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.ItemIncluido.TipoItemIncluido", "TipoItemIncluido", b1 =>
                        {
                            b1.Property<Guid>("ItemIncluidoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("tipo_item_incluido");

                            b1.HasKey("ItemIncluidoId");

                            b1.ToTable("itens_incluidos");

                            b1.WithOwner()
                                .HasForeignKey("ItemIncluidoId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Preco")
                        .IsRequired();

                    b.Navigation("Quantidade")
                        .IsRequired();

                    b.Navigation("TipoItemIncluido")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.OrdemServico.Aggregates.OrdemServico.Orcamento", b =>
                {
                    b.HasOne("Domain.OrdemServico.Aggregates.OrdemServico.OrdemServico", null)
                        .WithOne("Orcamento")
                        .HasForeignKey("Domain.OrdemServico.Aggregates.OrdemServico.Orcamento", "OrdemServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.Orcamento.DataCriacao", "DataCriacao", b1 =>
                        {
                            b1.Property<Guid>("OrcamentoId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("data_criacao");

                            b1.HasKey("OrcamentoId");

                            b1.ToTable("orcamentos");

                            b1.WithOwner()
                                .HasForeignKey("OrcamentoId");
                        });

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.Orcamento.PrecoOrcamento", "Preco", b1 =>
                        {
                            b1.Property<Guid>("OrcamentoId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("preco");

                            b1.HasKey("OrcamentoId");

                            b1.ToTable("orcamentos");

                            b1.WithOwner()
                                .HasForeignKey("OrcamentoId");
                        });

                    b.Navigation("DataCriacao")
                        .IsRequired();

                    b.Navigation("Preco")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.OrdemServico.Aggregates.OrdemServico.OrdemServico", b =>
                {
                    b.OwnsOne("Domain.OrdemServico.ValueObjects.OrdemServico.Codigo", "Codigo", b1 =>
                        {
                            b1.Property<Guid>("OrdemServicoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("codigo");

                            b1.HasKey("OrdemServicoId");

                            b1.ToTable("ordens_servico");

                            b1.WithOwner()
                                .HasForeignKey("OrdemServicoId");
                        });

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.OrdemServico.HistoricoTemporal", "Historico", b1 =>
                        {
                            b1.Property<Guid>("OrdemServicoId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("data_criacao");

                            b1.Property<DateTime?>("DataEntrega")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("data_entrega");

                            b1.Property<DateTime?>("DataFinalizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("data_finalizacao");

                            b1.Property<DateTime?>("DataInicioExecucao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("data_inicio_execucao");

                            b1.HasKey("OrdemServicoId");

                            b1.ToTable("ordens_servico");

                            b1.WithOwner()
                                .HasForeignKey("OrdemServicoId");
                        });

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.OrdemServico.Status", "Status", b1 =>
                        {
                            b1.Property<Guid>("OrdemServicoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("status");

                            b1.HasKey("OrdemServicoId");

                            b1.ToTable("ordens_servico");

                            b1.WithOwner()
                                .HasForeignKey("OrdemServicoId");
                        });

                    b.Navigation("Codigo")
                        .IsRequired();

                    b.Navigation("Historico")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.OrdemServico.Aggregates.OrdemServico.ServicoIncluido", b =>
                {
                    b.HasOne("Domain.OrdemServico.Aggregates.OrdemServico.OrdemServico", null)
                        .WithMany("ServicosIncluidos")
                        .HasForeignKey("OrdemServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.ServicoIncluido.NomeServico", "Nome", b1 =>
                        {
                            b1.Property<Guid>("ServicoIncluidoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("nome");

                            b1.HasKey("ServicoIncluidoId");

                            b1.ToTable("servicos_incluidos");

                            b1.WithOwner()
                                .HasForeignKey("ServicoIncluidoId");
                        });

                    b.OwnsOne("Domain.OrdemServico.ValueObjects.ServicoIncluido.PrecoServico", "Preco", b1 =>
                        {
                            b1.Property<Guid>("ServicoIncluidoId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("preco");

                            b1.HasKey("ServicoIncluidoId");

                            b1.ToTable("servicos_incluidos");

                            b1.WithOwner()
                                .HasForeignKey("ServicoIncluidoId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Preco")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.OrdemServico.Aggregates.OrdemServico.OrdemServico", b =>
                {
                    b.Navigation("ItensIncluidos");

                    b.Navigation("Orcamento");

                    b.Navigation("ServicosIncluidos");
                });
#pragma warning restore 612, 618
        }
    }
}
